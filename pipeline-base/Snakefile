# TODO:
#  * make location of spacegraphcats configurable
import os
import itertools
import json

thisdir = os.getcwd()
spacegraphcats = os.path.join(thisdir, '../../spacegraphcats')
os.environ['PYTHONPATH'] = spacegraphcats

podar_ref_genomes = expand("podar-ref/{num}.fa", num=range(0, 64))

hu_bin_genomes = ["hu-genomes/hu-genome24.fa",
                  "hu-genomes/hu-genome33.fa", "hu-genomes/hu-genome25.fa",
                  "hu-genomes/hu-genome27.fa", "hu-genomes/hu-genome08.fa",
                  "hu-genomes/hu-genome40.fa", "hu-genomes/hu-genome30.fa",
                  "hu-genomes/hu-genome31.fa", "hu-genomes/hu-genome41.fa",
                  "hu-genomes/hu-genome26.fa", "hu-genomes/hu-genome35.fa",
                  "hu-genomes/hu-genome22.fa", "hu-genomes/hu-genome23.fa",
                  "hu-genomes/hu-genome34.fa", "hu-genomes/hu-genome36.fa",
                  "hu-genomes/hu-genome19.fa", "hu-genomes/hu-genome21.fa",
                  "hu-genomes/hu-genome20.fa", "hu-genomes/hu-genome37.fa",
                  "hu-genomes/hu-genome29.fa", "hu-genomes/hu-genome11.fa",
                  "hu-genomes/hu-genome10.fa", "hu-genomes/hu-genome28.fa",
                  "hu-genomes/hu-genome12.fa", "hu-genomes/hu-genome13.fa",
                  "hu-genomes/hu-genome38.fa", "hu-genomes/hu-genome39.fa",
                  "hu-genomes/hu-genome14.fa", "hu-genomes/hu-genome03.fa",
                  "hu-genomes/hu-genome02.fa"]

strain_bacteroides = [x.strip() for x in open('conf/strain-bacteroides.txt')]
strain_gingivalis = [x.strip() for x in open('conf/strain-gingivalis.txt')]
strain_denticola = [x.strip() for x in open('conf/strain-denticola.txt')]

recover_ruminis = [x.strip() for x in open('conf/recover-ruminis.txt')]
recover_fuso = [x.strip() for x in open('conf/recover-fuso.txt')]

def signatures(*filenames):
    return [ x + '.sig' for x in itertools.chain(*filenames) ]

def catlas_build(conf_file):
    "Produce the list of files output by 'conf/run <config> build"
    with open(conf_file, 'rt') as fp:
        jj = json.load(fp)

    catlas_base = jj['catlas_base']
    ksize = jj['ksize']
    radius = jj['radius']

    dirname = '{}_k{}_r{}'.format(catlas_base, ksize, radius)

    z = []
    z.append(catlas_base + '/bcalm.{}.k31.unitigs.fa'.format(catlas_base))
    z.append(dirname + '/catlas.csv')
    z.append(dirname + '/cdbg.gxt')
    z.append(dirname + '/contigs.fa.gz')
    z.append(dirname + '/contigs.fa.gz.indices')
    z.append(dirname + '/contigs.fa.gz.info.csv')
    z.append(dirname + '/contigs.fa.gz.mphf')
    z.append(dirname + '/first_doms.txt')
    return z


def catlas_search(conf_file, cdbg_only=False, suffix=''):
    "Produce the list of files output by 'conf/run <config> search"
    with open(conf_file, 'rt') as fp:
        jj = json.load(fp)

    catlas_base = jj['catlas_base']
    ksize = jj['ksize']
    radius = jj['radius']

    cdbg_str = ""
    if cdbg_only:
        cdbg_str = '_cdbg'
    dirname = '{}_k{}_r{}{}_search_oh0{}'.format(catlas_base, ksize, radius,
                                                 cdbg_str, suffix)

    filenames = jj['search']
    z = []
    for x in filenames:
        x = os.path.basename(x)
        z.append(dirname + '/{}.cdbg_ids.txt.gz'.format(x))
        z.append(dirname + '/{}.contigs.sig'.format(x))
        z.append(dirname + '/{}.frontier.txt.gz'.format(x))
        z.append(dirname + '/{}.response.txt'.format(x))

    z.append(dirname + '/results.csv')

    return z


def catlas_search_sigs(conf_file, cdbg_only=False, suffix=''):
    "Produce the list of contigs.sig files output by 'conf/run <config> search"
    with open(conf_file, 'rt') as fp:
        jj = json.load(fp)

    catlas_base = jj['catlas_base']
    ksize = jj['ksize']
    radius = jj['radius']

    cdbg_str = ""
    if cdbg_only:
        cdbg_str = '_cdbg'
    dirname = '{}_k{}_r{}{}_search_oh0{}'.format(catlas_base, ksize, radius,
                                                 cdbg_str, suffix)

    filenames = jj['search']
    z = []
    for x in filenames:
        x = os.path.basename(x)
        z.append(dirname + '/{}.contigs.sig'.format(x))

    return z


def catlas_extract(conf_file, cdbg_only=False, suffix=''):
    "Produce the list of files output by 'conf/run <config> extract_contigs extract_reads"
    with open(conf_file, 'rt') as fp:
        jj = json.load(fp)

    catlas_base = jj['catlas_base']
    ksize = jj['ksize']
    radius = jj['radius']

    cdbg_str = ""
    if cdbg_only:
        cdbg_str = '_cdbg'
    dirname = '{}_k{}_r{}{}_search_oh0{}'.format(catlas_base, ksize, radius,
                                                 cdbg_str, suffix)

    filenames = jj['search']
    z = []
    for x in filenames:
        x = os.path.basename(x)
        z.append(dirname + '/{}.cdbg_ids.reads.fa.gz'.format(x))
        z.append(dirname + '/{}.cdbg_ids.contigs.fa.gz'.format(x))

    return z

# not used currently, leaving for legacy reasons :)
def catlas_crumbs(conf_file):
    "Produce crumbs!"
    with open(conf_file, 'rt') as fp:
        jj = json.load(fp)

    catlas_base = jj['catlas_base']
    ksize = jj['ksize']
    radius = jj['radius']

    dirname = '{}_k{}_r{}_search_oh0'.format(catlas_base, ksize, radius)

    filenames = jj['search']
    z = []
    for x in filenames:
        x = os.path.basename(x)
        z.append(dirname + '/{}.cdbg_ids.reads.fa.gz.crumbs.fa'.format(x))
        z.append(dirname + '/{}.cdbg_ids.contigs.fa.gz.crumbs.fa'.format(x))

    return z

def plass_assemblies(conf_file):
    "Produce PLASS assemblies!"
    with open(conf_file, 'rt') as fp:
        jj = json.load(fp)

    catlas_base = jj['catlas_base']
    ksize = jj['ksize']
    radius = jj['radius']

    dirname = '{}_k{}_r{}_search_oh0'.format(catlas_base, ksize, radius)

    filenames = jj['search']
    z = []
    for x in filenames:
        x = os.path.basename(x)
        output = dirname + '/{}.cdbg_ids.reads.fa.gz.plass.cdhit.fa'.format(x)
        z.append(output)

    return z


def megahit_assemblies(conf_file):
    "Produce Megahit assemblies!"
    with open(conf_file, 'rt') as fp:
        jj = json.load(fp)

    catlas_base = jj['catlas_base']
    ksize = jj['ksize']
    radius = jj['radius']

    dirname = '{}_k{}_r{}_search_oh0'.format(catlas_base, ksize, radius)

    filenames = jj['search']
    z = []
    for x in filenames:
        x = os.path.basename(x)
        output = dirname + '/{}.cdbg_ids.reads.fa.gz.megahit.fa'.format(x)
        z.append(output)

    return z

###

rule all:
    input:
        catlas_search('conf/podar-ref.json'),
        catlas_search('conf/podar-ref.json', cdbg_only=True),
        catlas_search('conf/podarV.json'),
        signatures(recover_fuso, recover_ruminis),
        signatures(strain_gingivalis, strain_denticola, strain_bacteroides),
        signatures(podar_ref_genomes, hu_bin_genomes),
        catlas_search('conf/podarV-ruminis.json', suffix='_ruminis'),
        catlas_search('conf/podarV-fuso.json', suffix='_fuso'),
        catlas_search('conf/podarV-denticola.json', suffix='_denticola'),
        catlas_search('conf/podarV-bacteroides.json', suffix='_bacteroides'),
        catlas_search('conf/podarV-gingivalis.json', suffix='_gingivalis'),
        "bacteroides.csv", "denticola.csv", "gingivalis.csv",
        catlas_search('conf/hu-s1.json'),
        catlas_extract('conf/hu-s1.json'),
        'fuso.reads.fa', 'ruminis.reads.fa',
        plass_assemblies('conf/hu-s1.json'),
        "checkm.plass.out",
        megahit_assemblies('conf/hu-s1.json'),
        "checkm.megahit.out"

rule download_podar_ref_genomes:
    output:
        podar_ref_genomes
    shell:
        """mkdir -p podar-ref && cd podar-ref && \
             (curl -L https://osf.io/8uxj9/?action=download | tar xzf -)"""

rule download_hu_bin_genomes:
    output:
        hu_bin_genomes
    shell:
        """mkdir -p hu-genomes && cd hu-genomes && \
             (curl -L https://osf.io/ehgbv/?action=download | tar xzf -)"""

rule download_podarV_strain_genomes:
    output:
        strain_denticola,
        strain_gingivalis,
        strain_bacteroides
    shell:
        "curl -L https://osf.io/h9emb/?action=download | tar xzf -"

rule download_podarV_recover_genomes:
    output:
        recover_ruminis,
        recover_fuso
    shell:
        "curl -L https://osf.io/w3xuf/?action=download | tar xzf -"


###

rule podar_ref_search:
    input:
        podar_ref_genomes
    output:
        catlas_search('conf/podar-ref.json')
    shell:
        "../../spacegraphcats/conf/run podar-ref search --nolock"

rule podar_ref_search_cdbg_only:
    input:
        podar_ref_genomes
    output:
        catlas_search('conf/podar-ref.json', cdbg_only=True),
    shell:
        "../../spacegraphcats/conf/run podar-ref search --cdbg-only --nolock"

rule podarV_build:
    input:
        "SRR606249.k31.abundtrim.fq.gz"
    output:
        catlas_build('conf/podarV.json'),
    shell:
        "../../spacegraphcats/conf/run podarV build --nolock"

rule podarV_search:
    input:
        catlas_build('conf/podarV.json'),
        podar_ref_genomes
    output:
        catlas_search('conf/podarV.json'),
    shell:
        "../../spacegraphcats/conf/run podarV search --nolock"

rule podarV_labeled_reads:
    input:
        "SRR606249.k31.abundtrim.fq.gz"
    output:
        "podarV_k31_r1/reads.bgz.labels",
        "podarV/podarV.reads.bgz"
    shell:
        "../../spacegraphcats/conf/run podarV {output[0]} --nolock"

rule podarV_extract:
    input:
        catlas_search('conf/podarV.json')
    output:
        catlas_extract('conf/podarV.json')
    shell:
        "../../spacegraphcats/conf/run podarV extract_contigs extract_reads --nolock"

rule podarV_crumbs:
    input:
        subtract=podar_ref_genomes,
        extracted=catlas_extract('conf/podarV.json')
    output:
        catlas_crumbs('conf/podarV.json')
    shell:
        """python -m spacegraphcats.search.make_donut -o .crumbs.fa \
              --query {input.extracted} \
              --subtract {input.subtract} \
              --directory podarV_k31_r1_search_oh0"""

rule podarV_ruminis_search:
    input:
        recover_ruminis,
        catlas_build('conf/podarV.json'),
    output:
        catlas_search('conf/podarV-ruminis.json', suffix='_ruminis'),
    shell:
        "../../spacegraphcats/conf/run podarV-ruminis search --nolock"

rule combine_ruminis_nodes:
    input:
        expand("podarV_k31_r1_search_oh0_ruminis/{x}.cdbg_ids.txt.gz",
               x = [ os.path.basename(j) for j in recover_ruminis ])
    output:
        "ruminis-combined-node-list.txt.gz"
    shell:
        "gunzip -c {input} | gzip -9c > {output[0]}"

rule extract_ruminis_reads:
    input:
        "ruminis-combined-node-list.txt.gz",
        "podarV_k31_r1/reads.bgz.labels"
    output:
        "ruminis.reads.fa"
    shell:
        "python -m spacegraphcats.search.extract_reads podarV/podarV.reads.bgz podarV_k31_r1/reads.bgz.labels {input[0]} -o {output[0]}"

rule podarV_fuso_search:
    input:
        recover_fuso,
        catlas_build('conf/podarV.json'),
    output:
        catlas_search('conf/podarV-fuso.json', suffix='_fuso'),
    shell:
        "../../spacegraphcats/conf/run podarV-fuso search --nolock"

rule combine_fuso_nodes:
    input:
        expand("podarV_k31_r1_search_oh0_fuso/{x}.cdbg_ids.txt.gz",
               x = [ os.path.basename(j) for j in recover_fuso ])
    output:
        "fuso-combined-node-list.txt.gz"
    shell:
        "gunzip -c {input} | gzip -9c > {output[0]}"

rule extract_fuso_reads:
    input:
        "fuso-combined-node-list.txt.gz",
        "podarV_k31_r1/reads.bgz.labels"
    output:
        "fuso.reads.fa"
    shell:
        "python -m spacegraphcats.search.extract_reads podarV/podarV.reads.bgz podarV_k31_r1/reads.bgz.labels {input[0]} -o {output[0]}"

rule podarV_bacteroides_search:
    input:
        strain_bacteroides
    output:
        catlas_search('conf/podarV-bacteroides.json', suffix='_bacteroides'),
    shell:
        "../../spacegraphcats/conf/run podarV-bacteroides search --nolock"

rule podarV_gingivalis_search:
    input:
        strain_gingivalis
    output:
        catlas_search('conf/podarV-gingivalis.json', suffix='_gingivalis'),
    shell:
        "../../spacegraphcats/conf/run podarV-gingivalis search --nolock"

rule podarV_denticola_search:
    input:
        strain_denticola
    output:
        catlas_search('conf/podarV-denticola.json', suffix='_denticola'),
    shell:
        "../../spacegraphcats/conf/run podarV-denticola search --nolock"

rule denticola_compare:
    input:
        "podar-ref/56.fa.sig",
        signatures(strain_denticola)
    output:
        "denticola.csv"
    shell:
        "sourmash search {input} -n 0 --threshold=0.0 -o {output}"
        
rule gingivalis_compare:
    input:
        "podar-ref/37.fa.sig",
        signatures(strain_gingivalis)
    output:
        "gingivalis.csv"
    shell:
        "sourmash search {input} -n 0 --threshold=0.0 -o {output}"
        
rule bacteroides_compare:
    input:
        "podar-ref/4.fa.sig",
        signatures(strain_bacteroides)
    output:
        "bacteroides.csv"
    shell:
        "sourmash search {input} -n 0 --threshold=0.0 -o {output}"

rule bacteroides_search_cont:
    input:
        "podar-ref/4.fa.sig",
        catlas_search_sigs('conf/podarV-bacteroides.json',
                           suffix='_bacteroides')
    output:
        [ x + '.cont.csv' for x in 
                            catlas_search_sigs('conf/podarV-bacteroides.json',
                                               suffix='_bacteroides') ]
    shell:
        "for i in podarV_k31_r1_search_oh0_bacteroides/*.sig; do sourmash search podar-ref/4.fa.sig $i -o $i.cont.csv --threshold=0.0 -n 0 --containment; done"

rule bacteroides_summarize_cont:
    input:
        [ x + '.cont.csv' for x in
                             catlas_search_sigs('conf/podarV-bacteroides.json',
                                               suffix='_bacteroides') ]
    output:
        "bacteroides.x.contigs.cont.csv"
    shell:
        """head -1 podarV_k31_r1_search_oh0_bacteroides/GCA_900104585.1_PRJEB16348_genomic.fna.gz.contigs.sig.cont.csv > bacteroides.x.contigs.cont.csv &&
           for i in {input}; do tail -1 $i; done >> bacteroides.x.contigs.cont.csv
        """

rule gingivalis_search_cont:
    input:
        "podar-ref/37.fa.sig",
        catlas_search_sigs('conf/podarV-gingivalis.json',
                           suffix='_gingivalis')
    output:
        [ x + '.cont.csv' for x in 
                            catlas_search_sigs('conf/podarV-gingivalis.json',
                                               suffix='_gingivalis') ]
    shell:
        "for i in podarV_k31_r1_search_oh0_gingivalis/*.sig; do sourmash search podar-ref/37.fa.sig $i -o $i.cont.csv --threshold=0.0 -n 0 --containment; done"

rule gingivalis_summarize_cont:
    input:
        [ x + '.cont.csv' for x in
                             catlas_search_sigs('conf/podarV-gingivalis.json',
                                               suffix='_gingivalis') ]
    output:
        "gingivalis.x.contigs.cont.csv"
    shell:
        """head -1 podarV_k31_r1_search_oh0_gingivalis/GCA_900157325.1_3A1_genomic.fna.gz.contigs.sig.cont.csv > gingivalis.x.contigs.cont.csv &&
           for i in {input}; do tail -1 $i; done >> gingivalis.x.contigs.cont.csv
        """

rule denticola_search_cont:
    input:
        "podar-ref/56.fa.sig",
        catlas_search_sigs('conf/podarV-denticola.json',
                           suffix='_denticola')
    output:
        [ x + '.cont.csv' for x in 
                            catlas_search_sigs('conf/podarV-denticola.json',
                                               suffix='_denticola') ]
    shell:
        "for i in podarV_k31_r1_search_oh0_denticola/*.sig; do sourmash search podar-ref/56.fa.sig $i -o $i.cont.csv --threshold=0.0 -n 0 --containment; done"

rule denticola_summarize_cont:
    input:
        [ x + '.cont.csv' for x in
                             catlas_search_sigs('conf/podarV-denticola.json',
                                               suffix='_denticola') ]
    output:
        "denticola.x.contigs.cont.csv"
    shell:
        """head -1 podarV_k31_r1_search_oh0_denticola/GCA_900164975.1_16852_2_85_genomic.fna.gz.contigs.sig.cont.csv > denticola.x.contigs.cont.csv &&
           for i in {input}; do tail -1 $i; done >> denticola.x.contigs.cont.csv
        """

### hu-s1 rules

rule hu_s1_build:
    input:
        "SRR1976948.abundtrim.fq.gz"
    output:
        catlas_build('conf/hu-s1.json'),
    shell:
        "../../spacegraphcats/conf/run hu-s1 build --nolock"

rule hu_s1_search:
    input:
        hu_bin_genomes,
        catlas_build('conf/hu-s1.json'),
    output:
        catlas_search('conf/hu-s1.json'),
    shell:
        "../../spacegraphcats/conf/run hu-s1 search --nolock"

rule hu_s1_labeled_reads:
    input:
        "SRR1976948.abundtrim.fq.gz"
    output:
        "hu-s1_k31_r1/reads.bgz.labels",
        "hu-s1/hu-s1.reads.bgz"
    shell:
        "../../spacegraphcats/conf/run hu-s1 {output[0]} --nolock"

rule hu_s1_extract:
    input:
        catlas_search('conf/hu-s1.json')
    output:
        catlas_extract('conf/hu-s1.json')
    shell:
        "../../spacegraphcats/conf/run hu-s1 extract_contigs extract_reads --nolock"

rule hu_s1_crumbs:
    input:
        subtract=hu_bin_genomes,
        extracted=catlas_extract('conf/hu-s1.json')
    output:
        catlas_crumbs('conf/hu-s1.json')
    shell:
        """python -m spacegraphcats.search.make_donut -o .crumbs.fa \
              --query {input.extracted} \
              --subtract {input.subtract} \
              --directory hu-s1_k31_r1_search_oh0"""

### generic rules

rule compute_signature_for_genome:
    input:
        "{genomefile}"
    output:
        "{genomefile}.sig"
    shell:
        "sourmash compute -k 31 --scaled=1000 {input[0]} -o {output[0]}"

rule assemble_megahit:
    input:
        "{filename}"
    output:
        "{filename}.megahit.fa"
    conda:
        "envs/megahit.yaml"
    shell:
        "megahit -m 20e9 -o {output}.assemble -r {input} -f && cp {output}.assemble/final.contigs.fa {output}"

rule assemble_plass:
    input:
        "{filename}"
    output:
        "{filename}.plass.fa"
    shell:
        "plass assemble {input} {output} {input}.dir"

rule remove_plass_stop:
    input:
        "{filename}.plass.fa"
    output:
        "{filename}.plass.fa.nostop.fa"
    shell:
        "scripts/remove-stop-plass.py {input}"

rule plass_cd_hit:
    input:
        "{filename}.plass.fa.nostop.fa"
    output:
        "{filename}.plass.cdhit.fa"
    shell:
        "cd-hit -c 1 -i {input} -o {output}"

rule checkm_plass:
    input:
        plass_assemblies('conf/hu-s1.json')
    output:
        directory("checkm.plass.out")
    conda:
        "envs/checkm.yaml"
    shell:
        "rm -fr checkm.plass.bins && mkdir checkm.plass.bins && ln {input} checkm.plass.bins && checkm lineage_wf -x fa checkm.plass.bins {output} -t {threads} --genes --pplacer_threads={threads}"


rule checkm_megahit:
    input:
        megahit_assemblies('conf/hu-s1.json')
    output:
        directory("checkm.megahit.out")
    conda:
        "envs/checkm.yaml"
    shell:
        "rm -fr checkm.megahit.bins && mkdir checkm.megahit.bins && ln {input} checkm.megahit.bins && checkm lineage_wf -x fa checkm.megahit.bins {output} -t {threads} --pplacer_threads={threads}"
